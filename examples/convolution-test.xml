<glsl-live-coder-project version="0.9.9">
  <shaders>
    <vertex><![CDATA[#version 130

in vec2 aVertex;
in vec2 aTexCoord;
out vec2 vTexCoord;

void main(void)
{
  vTexCoord = aTexCoord;
  
  gl_Position = vec4(aVertex, 0.0, 1.0);
}
]]></vertex>
    <fragment><![CDATA[#version 130

#pragma size(640, 480)

in vec2 vTexCoord;
out vec4 color;

uniform mat3 uGx;
uniform mat3 uGy;
uniform sampler2D uTexture;
uniform sampler2D uChannel0;
uniform vec2 uResolution;
uniform float uT;

uniform float uIntensity; // -20.0, 20.0, 1.0
uniform float uF; // 1.0, 20.0, 3.0
uniform float uScale;

const vec2 CENTER = vec2(0.5, 0.5);

void main(void)
{ 
  vec2 coord = uScale * (vTexCoord - CENTER) + CENTER;
  mat3 Gx = uGx * uIntensity * sin(uF*uT);
  mat3 Gy = uGy * uIntensity * cos(uF*uT);
  vec2 d = vec2(1.0) / uResolution;
  vec4 sum = texture2D(uChannel0, coord);
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      vec4 temp = texture2D(uChannel0, coord + d * vec2(float(i), float(j))); 
      sum += temp * vec4(Gx[i+1][j+1]); 
    }
  }
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      vec4 temp = texture2D(uChannel0, coord + d * vec2(float(i), float(j))); 
      sum += temp * vec4(Gy[i+1][j+1]); 
    }
  }
  color = sum;
}
]]></fragment>
  </shaders>
  <script><![CDATA[var G = [
    [ -1, -2, -1 ],
    [  0,  0,  0 ],
    [  1,  2,  1 ]
  ];

gl.uniformMatrix3fv("uGx", false, G);
gl.uniformMatrix3fv("uGy", true, G);

var frame = 0;

function onFrame() {
  var uScale = frame / 1000;
  gl.uniform1f("uScale", uScale);
  ++frame;

  if (frame == 1000)
    gl.stop();
}
]]></script>
  <input>
    <channel id="0" source="webcam"></channel>
  </input>
  <options>
    <clamp>0</clamp>
    <backgroundcolor>rgba(0,0,0,255)</backgroundcolor>
    <instantupdate>0</instantupdate>
    <imagerecycling>0</imagerecycling>
    <alpha>1</alpha>
  </options>
</glsl-live-coder-project>
