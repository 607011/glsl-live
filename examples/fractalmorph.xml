<glsl-live-coder-project version="0.9.6">
  <shaders>
    <vertex><![CDATA[// default vertex shader

attribute vec4 aVertex;
attribute vec4 aTexCoord;
varying vec4 vTexCoord;

void main(void)
{
  vTexCoord = aTexCoord;
  gl_Position = aVertex;
}
]]></vertex>
    <fragment><![CDATA[// Fractal morphing shader.
// Original implementation by David Alloza
// http://david.alloza.eu/WebGL/morphing.html

#pragma size(1024, 1024)

varying vec4 vTexCoord;
uniform sampler2D uTexture;
uniform float uT;
uniform vec2 uResolution;

uniform int uMaxIter; // 1, 500, 50

const float PI = 3.141592653589793238462643;

vec4 rainbow(float v) {
  float angle = 2.0 * PI * v;
  vec3 rgb = vec3(0.5) - vec3(0.5) * cos(vec3(2.0, 3.0, 5.0) * vec3(angle));
  return vec4(rgb, 1.0);
}

vec4 greenish(float v) {
  return vec4(0.3 * v, v, 0.0, 1.0);
}

void main() {
  float blend = sin(2.1 * uT) * cos(0.2 * uT);
  vec2 C = 4.0 * (vTexCoord.st - vec2(0.5, 0.5)) - vec2(0.5, 0.0);
  vec2 c = blend * vec2(sin(uT/4.1), cos(uT/6.1)) + (1.0 - blend) * C;
  int i;
  for (i = 0; i < uMaxIter; ++i) {
    vec2 C2 = C * C;
    C = vec2(C2.x - C2.y, (C.x + C.x) * C.y) + c;
    if (C2.x + C2.y > 4.0)
      break;
  }
  if (i == uMaxIter-1)
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
  else {
    gl_FragColor = rainbow(float(i) / float(uMaxIter));
  }
}
]]></fragment>
  </shaders>
</glsl-live-coder-project>
